//    This file is part of RTCMinHeartBeat library.
//
//    The Arduino RTCMinHeartBeat library is intended for any Arduino board.
//	  It allows to get a minute cadenced heartbeat generated by a D3231 Real Time Clock (RTC).
//	  The minute heartbeat is implemented using D3231 alarm2 to trigger an interrupt signal.
//    The library allows usual RTC functions (get/set RTC time&date) as well. 
//
//    Hardware Requisite :
//    - Any Arduino board
//	  - A D3231 Real Time Clock (RTC) module, with a 10k Ohm resistor placed between INT and VCC pins
//    - D3231 power (vcc/gnd pins) and I2C bus (sda/scl pins) conected to the Arduino
//    - D3231 INT/SQW pin connected to Arduino pin 2 (or any pin usable for interrupts, check your Arduino board hardware)
//
//    Copyright (C) 2016 Franck MARINI (fm@liwan.fr)
//
//    The Arduino RTCMinHeartBeat library is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.

//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.

//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.

// File : RTCMinHeartBeat.h
// Author : Franck Marini
// Module dependencies : Wire

#ifndef RTCMINHEARTBEAT_H
#define RTCMINHEARTBEAT

#include <Arduino.h>
#include <Wire.h>
	
#define D3231_RTC_BASE_ADDR 				0x68 
#define RTCMINHEARTBEAT_SUCCESS				0
#define RTCMINHEARTBEAT_DATA_TOO_LONG		1
#define RTCMINHEARTBEAT_TX_ADDR_NACK		2
#define RTCMINHEARTBEAT_TX_DATA_NACK		3
#define RTCMINHEARTBEAT_OTHER_ERROR			4
#define RTCMINHEARTBEAT_ERROR				255

enum{
	sunday = 1,
	monday,
	tuesday,
	wednesday,
	thursday,
	friday,
	saturday
};


// class to handle Time&Date data at user application level
class TimeDate{
	static const String _dayString[];
  public :
	byte sec;
	byte min;
	byte hour;
	byte day;
	byte date;
	byte month;
	unsigned int year;

    // functions to get time and date in string format
	const String dayString() { return _dayString[day];}
	const String timeString(){ return twoDigit(hour) + ":" + twoDigit(min) + ":" + twoDigit(sec);}
	const String dateString() { return String(date) + " " + String(month) + " " + String(year);}
	const String toString() { return dayString() + " " + dateString() + " " + timeString();}

  private :
    const String twoDigit(byte data) { return ( (data < 10) ?  "0"+String(data) : String(data));}
};


class RTCMinHeartBeat {
	boolean _beat; 
    static const String _dayString[];

  public :
	static RTCMinHeartBeat _rtc; // unique instance (singleton design pattern)
	byte configPin(int pin); // declaration of the pin handling RTC interrupt signal
	
	// heartbeat() function returns true once per minute 
	boolean heartBeat() {if (!_beat) return false; clearHeartBeat(); return true; }
    byte read(TimeDate&); // set RTC time and date
    byte set(TimeDate&); // ger RTC time and date
	
  private :
    // private constructor/destructor/copy constructor (singleton design pattern)
	RTCMinHeartBeat() : _beat(false) {Wire.begin();}    
    ~RTCMinHeartBeat() {}
    RTCMinHeartBeat (const RTCMinHeartBeat&);
	
	static void RTCMinHeartBeatISR();

	void clearHeartBeat();
	byte readRTC(byte addr, byte *values, byte nBytes);
    byte readRTC(byte addr) {byte b; readRTC(addr, &b, 1); return b;}
    byte writeRTC(byte addr, byte *values, byte nBytes);
    byte writeRTC(byte addr, byte value) { return ( writeRTC(addr, &value, 1) );}
	byte dec2bcd(byte b) {return b + 6 * (b / 10);}
    byte bcd2dec(byte b) {return b - 6 * (b >> 4);}
};

extern RTCMinHeartBeat& rtc;

#endif // RTCMINHEARTBEAT_H